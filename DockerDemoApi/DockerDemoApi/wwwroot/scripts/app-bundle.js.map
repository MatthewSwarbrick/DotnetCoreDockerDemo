{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/common/authorizeStep.ts","src/common/server.ts","src/home/home.ts","src/login/login.ts","src/register/register.ts","src/resources/index.ts","less/app.less"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { AuthorizeStep } from './common/authorizeStep';\r\n\r\n@inject(EventAggregator)\r\nexport class App {\r\n  router: Router;\r\n  eventSubscriptions: any[] = [];\r\n  userLoggedIn: boolean;\r\n\r\n  constructor(eventAggregator: EventAggregator) {\r\n    this.eventSubscriptions.push(eventAggregator.subscribe(\"userLoggedIn\", () => { this.userLoggedIn = true; }));\r\n  }\r\n\r\n  configureRouter(config, router) {\r\n    let self = this;\r\n    config.title = \"Docker Demo\";\r\n    config.addPipelineStep('authorize', AuthorizeStep);\r\n    config.map([\r\n      { route: '', moduleId: './home/home', name: 'home', title: 'Home', auth: true },\r\n      { route: 'register', moduleId: './register/register', name: 'register', title: 'Register' },\r\n      { route: 'login', moduleId: './login/login', name: 'login', title: 'Login' }\r\n    ]);\r\n\r\n    config.mapUnknownRoutes({ route: '', moduleId: './home/home', name:'home', title: 'Home', auth: true });\r\n    self.router = router;\r\n  }\r\n\r\n  activate() {\r\n    this.userLoggedIn = sessionStorage.getItem(\"accessToken\") != null;\r\n  }\r\n\r\n  dettached() {\r\n    this.eventSubscriptions.forEach(sub => sub.dispose())\r\n  }\r\n\r\n  logout() {\r\n    sessionStorage.removeItem(\"accessToken\");\r\n    this.userLoggedIn = false;\r\n    this.router.navigateToRoute(\"login\");\r\n  }\r\n}\r\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import {Aurelia} from 'aurelia-framework'\r\nimport environment from './environment';\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import { Redirect } from 'aurelia-router';\r\n\r\nexport class AuthorizeStep {\r\n  run(routingContext, next) {\r\n    var isLoggedIn = sessionStorage.getItem('accessToken') != null;\r\n    var loginRoute = 'login';\r\n\r\n    if (routingContext.getAllInstructions().some(i => i.config.auth)) {\r\n      if (!isLoggedIn) {\r\n        return next.cancel(new Redirect(loginRoute));\r\n      }\r\n    }\r\n\r\n    return next();\r\n  }\r\n}","import * as Q from 'q';\r\n\r\nexport class Server {\r\n    isBusy: boolean;\r\n    tokenKey: string = \"accessToken\";\r\n    rootPath: string = \"api/\"\r\n\r\n    post = (url, data) => {\r\n        this.isBusy = true;\r\n        return Q.when($.ajax(this.rootPath + url, \r\n            {\r\n                type: 'POST',\r\n                data: data,\r\n                headers: this.setHeaders()\r\n            })\r\n            .always(() => this.isBusy = false)\r\n            .fail(error => console.log(error)));\r\n    }\r\n\r\n    setHeaders() {\r\n        let token = sessionStorage.getItem(this.tokenKey);\r\n        let headers: any = {};\r\n        if (token) {\r\n            headers.Authorization = 'Bearer ' + token;\r\n        }\r\n\r\n        return headers;\r\n    };\r\n}","export class Home {\r\n    \r\n}","import { inject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { Server } from '../common/server';\r\n\r\n@inject(Server, Router, EventAggregator)\r\nexport class Login {\r\n    username: string;\r\n    password: string;\r\n    server: Server;\r\n    router: Router;\r\n    eventAggregator: EventAggregator;\r\n\r\n    constructor(server: Server, router: Router, eventAggregator: EventAggregator) {\r\n        this.server = server;\r\n        this.router = router;\r\n        this.eventAggregator = eventAggregator;\r\n    }\r\n\r\n    login() {\r\n        let modelToSend = {\r\n            username: this.username,\r\n            password: this.password\r\n        };\r\n\r\n        this.server.post(\"account/sign-in\", modelToSend).then(data => {\r\n            sessionStorage.setItem(this.server.tokenKey, data.access_token);\r\n            this.router.navigateToRoute(\"home\");\r\n            this.eventAggregator.publish(\"userLoggedIn\");\r\n        });\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport { Server } from '../common/server';\r\n\r\n@inject(Server, Router)\r\nexport class Register {\r\n    username: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n    agreeToTerms: boolean;\r\n\r\n    server: Server;\r\n    router: Router;\r\n\r\n    constructor(server: Server, router: Router) {\r\n        this.server = server;\r\n        this.router = router;\r\n    }\r\n\r\n    register() {\r\n        let modelToSend = {\r\n            username: this.username,\r\n            password: this.password,\r\n            confirmPassword: this.confirmPassword,\r\n            agreeToTermsAndConditions: this.agreeToTerms\r\n        };\r\n\r\n        this.server.post(\"account/register\", modelToSend).then(data => {\r\n            this.router.navigateToRoute(\"login\");\r\n        });\r\n    }\r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\r\n\r\nexport function configure(config: FrameworkConfiguration) {\r\n  //config.globalResources([]);\r\n}\r\n",".logo {\r\n    margin-right: 16px;\r\n}\r\n\r\n.pointer {\r\n    cursor: pointer;\r\n}\r\n\r\n.menu-list {\r\n    li {\r\n        margin-right: 10px;\r\n    }\r\n}"],"sourceRoot":".."}